name: Build PJSUA2 for Android

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  # Job 1: Build for arm64-v8a architecture
  build-arm64-v8a:
    name: Build PJSUA2 for arm64-v8a
    runs-on: ubuntu-latest
    outputs:
      lib-arm64-v8a: ${{ steps.upload-artifacts.outputs.artifact-path }}

    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Set up Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27c

      - name: Add NDK to PATH
        run: |
          echo "ANDROID_NDK_ROOT=/opt/hostedtoolcache/ndk/r27c/x64" >> $GITHUB_ENV
          echo "$ANDROID_NDK_ROOT" >> $GITHUB_PATH

      - name: Install SWIG and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y swig build-essential cmake libtool pkg-config

      - name: Set up environment variables
        run: |
          echo "BASE_FOLDER=${{ github.workspace }}" >> $GITHUB_ENV
          CONFIG_SITE_PATH="${{ github.workspace }}/pjlib/include/pj/config_site.h"
          mkdir -p "$(dirname "$CONFIG_SITE_PATH")"
          cat <<EOF > "$CONFIG_SITE_PATH"
          #define PJ_CONFIG_ANDROID 1
          #define PJMEDIA_HAS_G7221_CODEC 1
          #include <pj/config_site_sample.h>
          #define PJMEDIA_HAS_VIDEO 0
          #define PJMEDIA_AUDIO_DEV_HAS_ANDROID_JNI 1
          #define PJMEDIA_AUDIO_DEV_HAS_OPENSL 1
          #define PJSIP_AUTH_AUTO_SEND_NEXT 1
          EOF

      - name: Clean and Build arm64-v8a
        run: |
          TARGET_ABI=arm64-v8a
          cd ${{ github.workspace }}
          ./configure-android --use-ndk-cflags
          make dep && make clean && make

      - name: Upload arm64-v8a artifact
        id: upload-artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pjsua2-arm64-v8a
          path: ${{ github.workspace }}/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/arm64-v8a/libpjsua2.so

  # Job 2: Build for armeabi-v7a architecture
  build-armeabi-v7a:
    name: Build PJSUA2 for armeabi-v7a
    runs-on: ubuntu-latest
    needs: build-arm64-v8a  # Job 2 will run after Job 1 completes

    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Set up Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27c

      - name: Add NDK to PATH
        run: |
          echo "ANDROID_NDK_ROOT=/opt/hostedtoolcache/ndk/r27c/x64" >> $GITHUB_ENV
          echo "$ANDROID_NDK_ROOT" >> $GITHUB_PATH

      - name: Install SWIG and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y swig build-essential cmake libtool pkg-config

      - name: Set up environment variables
        run: |
          echo "BASE_FOLDER=${{ github.workspace }}" >> $GITHUB_ENV
          CONFIG_SITE_PATH="${{ github.workspace }}/pjlib/include/pj/config_site.h"
          mkdir -p "$(dirname "$CONFIG_SITE_PATH")"
          cat <<EOF > "$CONFIG_SITE_PATH"
          #define PJ_CONFIG_ANDROID 1
          #define PJMEDIA_HAS_G7221_CODEC 1
          #include <pj/config_site_sample.h>
          #define PJMEDIA_HAS_VIDEO 0
          #define PJMEDIA_AUDIO_DEV_HAS_ANDROID_JNI 1
          #define PJMEDIA_AUDIO_DEV_HAS_OPENSL 1
          #define PJSIP_AUTH_AUTO_SEND_NEXT 1
          EOF

      - name: Clean and Build armeabi-v7a
        run: |
          TARGET_ABI=armeabi-v7a
          cd ${{ github.workspace }}
          ./configure-android --use-ndk-cflags
          make dep && make clean && make

      - name: Upload armeabi-v7a artifact
        id: upload-artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pjsua2-armeabi-v7a
          path: ${{ github.workspace }}/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/armeabi-v7a/libpjsua2.so

  # Job 3: Build for x86 architecture
  build-x86:
    name: Build PJSUA2 for x86
    runs-on: ubuntu-latest
    needs: [build-arm64-v8a, build-armeabi-v7a]  # Job 3 will run after Jobs 1 and 2 complete

    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Set up Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27c

      - name: Add NDK to PATH
        run: |
          echo "ANDROID_NDK_ROOT=/opt/hostedtoolcache/ndk/r27c/x64" >> $GITHUB_ENV
          echo "$ANDROID_NDK_ROOT" >> $GITHUB_PATH

      - name: Install SWIG and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y swig build-essential cmake libtool pkg-config

      - name: Set up environment variables
        run: |
          echo "BASE_FOLDER=${{ github.workspace }}" >> $GITHUB_ENV
          CONFIG_SITE_PATH="${{ github.workspace }}/pjlib/include/pj/config_site.h"
          mkdir -p "$(dirname "$CONFIG_SITE_PATH")"
          cat <<EOF > "$CONFIG_SITE_PATH"
          #define PJ_CONFIG_ANDROID 1
          #define PJMEDIA_HAS_G7221_CODEC 1
          #include <pj/config_site_sample.h>
          #define PJMEDIA_HAS_VIDEO 0
          #define PJMEDIA_AUDIO_DEV_HAS_ANDROID_JNI 1
          #define PJMEDIA_AUDIO_DEV_HAS_OPENSL 1
          #define PJSIP_AUTH_AUTO_SEND_NEXT 1
          EOF

      - name: Clean and Build x86
        run: |
          TARGET_ABI=x86
          cd ${{ github.workspace }}
          ./configure-android --use-ndk-cflags
          make dep && make clean && make

      - name: Upload x86 artifact
        id: upload-artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pjsua2-x86
          path: ${{ github.workspace }}/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/x86/libpjsua2.so

  # Step 10: Collect all artifacts
  collect-artifacts:
    runs-on: ubuntu-latest
    needs: [build-arm64-v8a, build-armeabi-v7a, build-x86]  # Runs after all 3 build jobs are completed
    steps:
      - name: Download arm64-v8a artifact
        uses: actions/download-artifact@v2
        with:
          name: pjsua2-arm64-v8a

      - name: Download armeabi-v7a artifact
        uses: actions/download-artifact@v2
        with:
          name: pjsua2-armeabi-v7a

      - name: Download x86 artifact
        uses: actions/download-artifact@v2
        with:
          name: pjsua2-x86

      - name: Verify all libraries
        run: |
          echo "Verifying all libraries..."
          ls -R $GITHUB_WORKSPACE
