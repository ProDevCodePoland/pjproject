name: Build PJSUA2 for Android

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  build-pjsua2:
    name: Build PJSUA2 for multiple Android architectures
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Android NDK
      - name: Set up Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27c # Specify the NDK version (latest stable or preferred version)

      # Step 3: Add NDK to PATH
      - name: Add NDK to PATH
        run: |
          export ANDROID_NDK_ROOT=/opt/hostedtoolcache/ndk/r27c/x64
          export PATH=$ANDROID_NDK_ROOT:$PATH
          echo "ANDROID_NDK_ROOT set to $ANDROID_NDK_ROOT"
          echo "Updated PATH: $PATH"

      # Step 4: Install SWIG and dependencies for pjsua2
      - name: Install SWIG and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y swig
          sudo apt-get install -y build-essential cmake libtool pkg-config

      # Step 5: Configure and Build PJSUA2 for arm64-v8a architecture
      - name: Configure and Build PJSUA2 for arm64-v8a
        run: |
          cd /home/runner/work/pjproject/pjproject
          cd pjsip-apps/src/swig
          TARGET_ABI=arm64-v8a make
          
      # Step 6: Configure and Build PJSUA2 for armeabi-v7a architecture
      - name: Configure and Build PJSUA2 for armeabi-v7a
        run: |
          cd /home/runner/work/pjproject/pjproject
          cd pjsip-apps/src/swig
          TARGET_ABI=armeabi-v7a make

      # Step 7: Configure and Build PJSUA2 for x86 architecture
      - name: Configure and Build PJSUA2 for x86
        run: |
          cd /home/runner/work/pjproject/pjproject
          cd pjsip-apps/src/swig
          TARGET_ABI=x86 make

      # Step 8: Verify and move the compiled libraries (e.g., libpjsua2.so) to appropriate locations
      - name: Verify and move compiled libraries
        run: |
          if [ ! -f "/home/runner/work/pjproject/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/arm64-v8a/libpjsua2.so" ]; then
            echo "Native library libpjsua2.so not found!" 
            exit 1
          fi
          # Optional: Move libraries if necessary for other ABIs
          cp /home/runner/work/pjproject/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/arm64-v8a/libpjsua2.so /home/runner/work/pjproject/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/armeabi-v7a/
          cp /home/runner/work/pjproject/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/arm64-v8a/libpjsua2.so /home/runner/work/pjproject/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/x86/

      # Step 9: Upload compiled libraries as artifacts
      - name: Upload libraries as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pjsua2-libs
          path: |
            /home/runner/work/pjproject/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/arm64-v8a/libpjsua2.so
            /home/runner/work/pjproject/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/armeabi-v7a/libpjsua2.so
            /home/runner/work/pjproject/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/x86/libpjsua2.so
