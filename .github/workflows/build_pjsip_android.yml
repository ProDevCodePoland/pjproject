name: Build PJSUA2 for Android

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  # Job: Build PJSUA2 for all architectures
  build-all-architectures:
    name: Build PJSUA2 for all Android architectures (arm64-v8a, armeabi-v7a, x86)
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository with submodules
      - name: Checkout repository with submodules
        uses: actions/checkout@v3
        with:
          submodules: true

      # Step 2: Set up Android NDK
      - name: Set up Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27c

      # Step 3: Add NDK to PATH
      - name: Add NDK to PATH
        run: |
          echo "ANDROID_NDK_ROOT=/opt/hostedtoolcache/ndk/r27c/x64" >> $GITHUB_ENV
          echo "$ANDROID_NDK_ROOT" >> $GITHUB_PATH

      # Step 4: Install dependencies
      - name: Install SWIG and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y swig build-essential cmake libtool pkg-config

      # Step 5: Set up environment variables
      - name: Set up environment variables
        run: |
          echo "BASE_FOLDER=${{ github.workspace }}" >> $GITHUB_ENV
          CONFIG_SITE_PATH="${{ github.workspace }}/pjlib/include/pj/config_site.h"
          mkdir -p "$(dirname "$CONFIG_SITE_PATH")"
          cat <<EOF > "$CONFIG_SITE_PATH"
          #define PJ_CONFIG_ANDROID 1
          #define PJMEDIA_HAS_G7221_CODEC 1
          #include <pj/config_site_sample.h>
          #define PJMEDIA_HAS_VIDEO 0
          #define PJMEDIA_AUDIO_DEV_HAS_ANDROID_JNI 1
          #define PJMEDIA_AUDIO_DEV_HAS_OPENSL 1
          #define PJSIP_AUTH_AUTO_SEND_NEXT 1
          EOF

      # Step 6: Clean and Build for all architectures
      - name: Clean and Build for all architectures
        run: |
          # Loop to build for all architectures
          for ABI in arm64-v8a armeabi-v7a x86; do
            echo "Building for $ABI..."

            # Set the target architecture
            TARGET_ABI=$ABI

            # Configure for the target architecture
            cd ${{ github.workspace }}
            ./configure-android --use-ndk-cflags

            # Compile for the target architecture
            make dep && make clean && make

            # Move libpjsua2.so to appropriate directory for the target ABI
            LIB_DIR="${{ github.workspace }}/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/$ABI"
            mkdir -p $LIB_DIR
            mv ${{ github.workspace }}/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/libpjsua2.so $LIB_DIR/

            # Change directory to swig folder and build with make
            cd ${{ github.workspace }}/pjsip-apps/src/swig
            make

            # Upload each architecture's artifact
            echo "Uploading $ABI artifact"
            echo "::set-output name=artifact-path-${ABI}::${{ github.workspace }}/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/$ABI/libpjsua2.so"
          done

      # Step 7: Upload all compiled libraries as artifacts
      - name: Upload libraries as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pjsua2-all-architectures
          path: |
            ${{ github.workspace }}/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/arm64-v8a/libpjsua2.so
            ${{ github.workspace }}/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/armeabi-v7a/libpjsua2.so
            ${{ github.workspace }}/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/x86/libpjsua2.so
