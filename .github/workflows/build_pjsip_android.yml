name: Build PJSUA2 for Android

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  build-pjsua2:
    name: Build PJSUA2 for multiple Android architectures
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository with submodules (if needed)
      - name: Checkout repository with submodules
        uses: actions/checkout@v3
        with:
          submodules: true

      # Step 2: Set up Android NDK
      - name: Set up Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27c

      # Step 3: Add NDK to PATH
      - name: Add NDK to PATH
        run: |
          export ANDROID_NDK_ROOT=/opt/hostedtoolcache/ndk/r27c/x64
          export PATH=$ANDROID_NDK_ROOT:$PATH
          echo "ANDROID_NDK_ROOT set to $ANDROID_NDK_ROOT"
          echo "Updated PATH: $PATH"

      # Step 4: Install SWIG and dependencies
      - name: Install SWIG and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y swig build-essential cmake libtool pkg-config

      # Step 5: Set up environment variables and build folders
      - name: Set up environment variables and build folders
        run: |
          BASE_FOLDER=$(pwd)
          PJSIP_BASE_PATH="${BASE_FOLDER}/pjproject"
          CONFIG_SITE_PATH="${PJSIP_BASE_PATH}/pjlib/include/pj/config_site.h"
          FINAL_BUILD_DIR="${BASE_FOLDER}/pjsip-build"
          FINAL_BUILD_LIB="${FINAL_BUILD_DIR}/lib"
          FINAL_BUILD_LOGS="${FINAL_BUILD_DIR}/logs"

          # Clear and set up build directories
          rm -rf "${FINAL_BUILD_DIR}"
          mkdir -p "${FINAL_BUILD_LIB}"
          mkdir -p "${FINAL_BUILD_LOGS}"

          # Create config_site.h
          mkdir -p "$(dirname "$CONFIG_SITE_PATH")"
          cat <<EOF > "$CONFIG_SITE_PATH"
          #define PJ_CONFIG_ANDROID 1
          #define PJMEDIA_HAS_G7221_CODEC 1
          #include <pj/config_site_sample.h>
          #define PJMEDIA_HAS_VIDEO 0
          #define PJMEDIA_AUDIO_DEV_HAS_ANDROID_JNI 1
          #define PJMEDIA_AUDIO_DEV_HAS_OPENSL 1
          #define PJSIP_AUTH_AUTO_SEND_NEXT 1
          EOF

      # Step 6: Verify the directory structure
      - name: Verify the directory structure
        run: |
          echo "Current working directory: $(pwd)"
          echo "Listing contents of the base folder:"
          ls -R $(pwd)

      # Step 5: Configure pjproject
      - name: Configure pjproject
        run: |
          cd $(pwd)
          ./configure-android --use-ndk-cflags

      # Step 8: Build PJSUA2 for arm64-v8a architecture
      - name: Build PJSUA2 for arm64-v8a
        run: |
          cd $(pwd)/pjsip-apps/src/swig
          echo "Now in directory: $(pwd)"
          TARGET_ABI=arm64-v8a make

      # Step 9: Build PJSUA2 for armeabi-v7a architecture
      - name: Build PJSUA2 for armeabi-v7a
        run: |
          cd $(pwd)/pjsip-apps/src/swig
          echo "Now in directory: $(pwd)"
          TARGET_ABI=armeabi-v7a make

      # Step 10: Build PJSUA2 for x86 architecture
      - name: Build PJSUA2 for x86
        run: |
          cd $(pwd)/pjsip-apps/src/swig
          echo "Now in directory: $(pwd)"
          TARGET_ABI=x86 make

      # Step 11: Verify and move compiled libraries
      - name: Verify and move compiled libraries
        run: |
          cd $(pwd)/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/arm64-v8a
          if [ ! -f libpjsua2.so ]; then
            echo "Native library libpjsua2.so not found!" 
            exit 1
          fi
          cp libpjsua2.so ../armeabi-v7a/
          cp libpjsua2.so ../x86/

      # Step 12: Upload compiled libraries as artifacts
      - name: Upload libraries as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pjsua2-libs
          path: |
            $(pwd)/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/arm64-v8a/libpjsua2.so
            $(pwd)/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/armeabi-v7a/libpjsua2.so
            $(pwd)/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/x86/libpjsua2.so
