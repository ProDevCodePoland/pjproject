name: Build PJSUA2 for Android

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  setup-environment:
    name: Setup Environment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Set up Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27c

      - name: Add NDK to PATH
        run: |
          echo "ANDROID_NDK_ROOT=/opt/hostedtoolcache/ndk/r27c/x64" >> $GITHUB_ENV
          echo "$ANDROID_NDK_ROOT" >> $GITHUB_PATH

      - name: Install SWIG and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y swig build-essential cmake libtool pkg-config

      - name: Download and extract OpenSSL
        run: |
          curl -L https://github.com/openssl/openssl/releases/download/openssl-3.4.0/openssl-3.4.0.tar.gz -o openssl.tar.gz
          tar -xvzf openssl.tar.gz

      - name: Set up environment variables
        run: |
          echo "BASE_FOLDER=${{ github.workspace }}" >> $GITHUB_ENV
          CONFIG_SITE_PATH="${{ github.workspace }}/pjlib/include/pj/config_site.h"
          mkdir -p "$(dirname "$CONFIG_SITE_PATH")"
          cat <<EOF > "$CONFIG_SITE_PATH"
          #define PJ_CONFIG_ANDROID 1
          #include <pj/config_site_sample.h>

          // **Basic settings**
          #define PJMEDIA_HAS_VIDEO 0
          #define PJMEDIA_AUDIO_DEV_HAS_ANDROID_JNI 0  
          #define PJMEDIA_AUDIO_DEV_HAS_OPENSL 1      
          #define PJSIP_AUTH_AUTO_SEND_NEXT 1

          // **Security & TLS**
          #define PJSIP_HAS_TLS_TRANSPORT 1
          #define PJSIP_HAS_TLS 1
          #define PJSIP_TLS_VERSION 1
          #define PJ_SSL_SOCK_IMP PJ_SSL_SOCK_IMP_OPENSSL
          #define PJ_HAS_SSL_SOCK 1

          // **Android optimization**
          #define PJ_ANDROID 1
          #define PJ_OS_HAS_CHECK_STACK 0
          #define PJ_THREAD_SET_STACK_SIZE 1
          #define PJ_THREAD_DEFAULT_STACK_SIZE 16384  
          #define PJ_ENABLE_EXTRA_CHECK 0

          // **SIP stack customization**
          #define PJSUA_MAX_CALLS 2
          #define PJSIP_MAX_PKT_LEN 4000 
          #define PJSUA_MAX_ACC 10
          #define PJSUA_MAX_PLAYERS 2
          #define PJSUA_MAX_RECORDERS 2

          // **Additional optimizations**
          #define PJ_IOQUEUE_MAX_HANDLES 64
          #define PJ_LOG_MAX_LEVEL 5 
          #define PJ_POOL_ALIGNMENT 4
          #define PJ_POOL_INCREMENT_SIZE 128
          #define PJ_POOL_ALLOC_POLICY 2
          EOF

      - name: Cache environment
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}
          key: pjsua2-environment-${{ github.run_id }}

  build-architectures:
    name: Build for
    runs-on: ubuntu-latest
    needs: setup-environment
    strategy:
      matrix:
        architecture: [arm64-v8a, armeabi-v7a, x86, x86_64]
    steps:
      - name: Restore environment
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}
          key: pjsua2-environment-${{ github.run_id }}

      - name: Grant execute permissions to all scripts
        run: chmod -R +x ${{ github.workspace }}

      - name: Set up toolchain paths
        run: |
          export TOOLCHAIN=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64
          echo "TOOLCHAIN=$TOOLCHAIN" >> $GITHUB_ENV
          
          echo "$TOOLCHAIN/bin" >> $GITHUB_PATH
          
          echo "CC_aarch64=$TOOLCHAIN/bin/aarch64-linux-android23-clang" >> $GITHUB_ENV
          echo "CC_arm=$TOOLCHAIN/bin/armv7a-linux-androideabi23-clang" >> $GITHUB_ENV
          echo "CC_x86=$TOOLCHAIN/bin/i686-linux-android23-clang" >> $GITHUB_ENV
          echo "CC_x86_64=$TOOLCHAIN/bin/x86_64-linux-android23-clang" >> $GITHUB_ENV

      - name: Build OpenSSL for ${{ matrix.architecture }}
        run: |
          cd ${{ github.workspace }}/openssl-3.4.0
          
          case "${{ matrix.architecture }}" in
            arm64-v8a)
              export CC=$CC_aarch64
              ./Configure android-arm64 -D__ANDROID_API__=23 ;;
            armeabi-v7a)
              export CC=$CC_arm
              ./Configure android-arm -D__ANDROID_API__=23 ;;
            x86)
              export CC=$CC_x86
              ./Configure android-x86 -D__ANDROID_API__=23 ;;
            x86_64)
              export CC=$CC_x86_64
              ./Configure android-x86_64 -D__ANDROID_API__=23 ;;
          esac

          make -j$(nproc)

          mkdir -p ${{ github.workspace }}/openssl-lib
          cp libcrypto.a libssl.a ${{ github.workspace }}/openssl-lib
          cp -v ${{ github.workspace }}/openssl-3.4.0/libcrypto.so ${{ github.workspace }}/openssl-lib
          cp -v ${{ github.workspace }}/openssl-3.4.0/libssl.so ${{ github.workspace }}/openssl-lib
 
      - name: Build PJSUA2 for ${{ matrix.architecture }}
        run: |
          export OPENSSL_DIR=${{ github.workspace }}/openssl-3.4.0
          export CFLAGS="-I$OPENSSL_DIR/include"
          export LDFLAGS="-L$OPENSSL_DIR"
          export CPPFLAGS="-I$OPENSSL_DIR/include"
          export PKG_CONFIG_PATH="$OPENSSL_DIR/pkgconfig"

          TARGET_ABI=${{ matrix.architecture }}
          
          cd ${{ github.workspace }}
           TARGET_ABI=${{ matrix.architecture }} ./configure-android \
           --use-ndk-cflags \
           --with-ssl=$OPENSSL_DIR/include
           make dep && make clean && make

      - name: Build Java files
        if: matrix.architecture == 'arm64-v8a'
        run: |
          cd ${{ github.workspace }}/pjsip-apps/src/swig
          make

      - name: Upload Java artifact
        if: matrix.architecture == 'arm64-v8a'
        uses: actions/upload-artifact@v4
        with:
          name: libpjsua2-java-swing-wrapper
          path: ${{ github.workspace }}/pjsip-apps/src/swig/java/android/

      - name: Copy OpenSSL shared libraries to jniLibs
        run: |
          mkdir -p ${{ github.workspace }}/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/${{ matrix.architecture }}
          cp -v ${{ github.workspace }}/openssl-lib/libssl.so ${{ github.workspace }}/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/${{ matrix.architecture }}
          cp -v ${{ github.workspace }}/openssl-lib/libcrypto.so ${{ github.workspace }}/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/${{ matrix.architecture }}

      - name: Upload ${{ matrix.architecture }} artifact
        uses: actions/upload-artifact@v4
        with:
          name: libpjsua2-${{ matrix.architecture }}
          path: ${{ github.workspace }}/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/${{ matrix.architecture }}
  upload-all-artifacts:
    name: Upload all compiled libraries
    runs-on: ubuntu-latest
    needs: build-architectures

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
