name: Build PJSUA2 for Android

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  setup-environment:
    name: Setup Environment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Set up Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27c

      - name: Add NDK to PATH
        run: |
          echo "ANDROID_NDK_ROOT=/opt/hostedtoolcache/ndk/r27c/x64" >> $GITHUB_ENV
          echo "$ANDROID_NDK_ROOT" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y swig build-essential cmake libtool pkg-config

      - name: Install OpenSSL for Android
        run: |
          curl -L https://www.openssl.org/source/openssl-3.4.0.tar.gz -o openssl.tar.gz
          tar -xvzf openssl.tar.gz
          cd openssl-3.4.0

          # Kompilacja OpenSSL dla kaÅ¼dej architektury
          for TARGET in arm64-v8a armeabi-v7a x86 x86_64; do
            case $TARGET in
              arm64-v8a)
                CONFIG_TARGET="android-arm64"
                ARCH="aarch64"
                ;;
              armeabi-v7a)
                CONFIG_TARGET="android-arm"
                ARCH="arm"
                ;;
              x86)
                CONFIG_TARGET="android-x86"
                ARCH="i686"
                ;;
              x86_64)
                CONFIG_TARGET="android-x86_64"
                ARCH="x86_64"
                ;;
            esac

            # Ustawienia toolchaina dla danej architektury
            export TOOLCHAIN=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64
            export AR=$TOOLCHAIN/bin/llvm-ar
            export CC=$TOOLCHAIN/bin/${ARCH}-linux-android23-clang
            export CXX=$TOOLCHAIN/bin/${ARCH}-linux-android23-clang++
            export RANLIB=$TOOLCHAIN/bin/llvm-ranlib

            # Konfiguracja OpenSSL
            ./Configure $CONFIG_TARGET -D__ANDROID_API__=23
            make clean
            make -j$(nproc)

            # Przeniesienie bibliotek do katalogu
            mkdir -p ${{ github.workspace }}/openssl-3.4.0/lib/$TARGET
            cp libcrypto.a libssl.a ${{ github.workspace }}/openssl-3.4.0/lib/$TARGET/
          done

          echo "OPENSSL_DIR=${{ github.workspace }}/openssl-3.4.0" >> $GITHUB_ENV

      - name: Set up PJSUA2 environment
        run: |
          echo "BASE_FOLDER=${{ github.workspace }}" >> $GITHUB_ENV
          CONFIG_SITE_PATH="${{ github.workspace }}/pjlib/include/pj/config_site.h"
          mkdir -p "$(dirname "$CONFIG_SITE_PATH")"
          cat <<EOF > "$CONFIG_SITE_PATH"
          #define PJ_CONFIG_ANDROID 1
          #define PJMEDIA_HAS_G7221_CODEC 1
          #include <pj/config_site_sample.h>
          #define PJMEDIA_HAS_VIDEO 0
          #define PJMEDIA_AUDIO_DEV_HAS_ANDROID_JNI 1
          #define PJMEDIA_AUDIO_DEV_HAS_OPENSL 1
          #define PJSIP_AUTH_AUTO_SEND_NEXT 1
          #define PJSIP_HAS_TLS_TRANSPORT 1
          #define PJ_HAS_SSL_SOCK 1
          EOF

      - name: Cache environment
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}
          key: pjsua2-environment-${{ github.run_id }}

  build-architectures:
    name: Build for
    runs-on: ubuntu-latest
    needs: setup-environment
    strategy:
      matrix:
        architecture: [arm64-v8a, armeabi-v7a, x86, x86_64]

    steps:
      - name: Restore environment
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}
          key: pjsua2-environment-${{ github.run_id }}

      - name: Build for ${{ matrix.architecture }}
        run: |
          export OPENSSL_DIR=${{ github.workspace }}/openssl-3.4.0
          export CFLAGS="-I$OPENSSL_DIR/include"
          export LDFLAGS="-L$OPENSSL_DIR/lib/${{ matrix.architecture }}"
          export CPPFLAGS="-I$OPENSSL_DIR/include"
          export PKG_CONFIG_PATH="$OPENSSL_DIR/lib/${{ matrix.architecture }}/pkgconfig"

          cd ${{ github.workspace }}
          TARGET_ABI=${{ matrix.architecture }} ./configure-android \
          --use-ndk-cflags \
          --with-ssl=$OPENSSL_DIR \
          --with-ssl-include=$OPENSSL_DIR/include

          make dep && make clean && make
          cd ${{ github.workspace }}/pjsip-apps/src/swig
          make

      - name: Upload ${{ matrix.architecture }} artifact
        uses: actions/upload-artifact@v4
        with:
          name: libpjsua2-${{ matrix.architecture }}
          path: ${{ github.workspace }}/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/${{ matrix.architecture }}

  upload-all-artifacts:
    name: Upload all compiled libraries
    runs-on: ubuntu-latest
    needs: build-architectures

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Upload final artifact
        uses: actions/upload-artifact@v4
        with:
          name: pjsua2-all-architectures
          path: libpjsua2-*/ 
